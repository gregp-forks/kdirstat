/*
 *   File name:	kdirstatapp.cpp
 *   Summary:	The KDirStat application - menu bar, tool bar, ...
 *   License:	GPL - See file COPYING for details.
 *
 *   Author:	Stefan Hundhammer <sh@suse.de>
 *		Parts auto-generated by KDevelop
 *
 *   Updated:	2002-01-20
 *
 *   $Id: kdirstatapp.cpp,v 1.9 2002/01/28 14:40:20 hundhammer Exp $
 *
 */


#include <kapp.h>
#include <kiconloader.h>
#include <kmessagebox.h>
#include <kfiledialog.h>
#include <kmenubar.h>
#include <kstatusbar.h>
#include <klocale.h>
#include <kconfig.h>
#include <kstdaction.h>
#include <qclipboard.h>
#include <qpopupmenu.h>

#include "kdirstatapp.h"
#include "kcleanupcollection.h"
#include "kdirtree.h"
#include "kpacman.h"


#define	USER_CLEANUPS	10	// Number of user cleanup actions

#define ID_STATUS_MSG	1
#define ID_PACMAN	42
#define PACMAN_WIDTH	350
#define PACMAN_INTERVAL	75	// millisec


using namespace KDirStat;


KDirStatApp::KDirStatApp( QWidget* , const char* name )
    : KMainWindow( 0, name )
{
    // Simple inits

    _settingsDialog = 0;	// Delayed creation - when needed
    _feedbackDialog = 0;


    // Set up internal (mainWin -> mainWin) connections

    connect( this,	SIGNAL( readConfig       ( void ) ),
	     this,	SLOT  ( readMainWinConfig( void ) ) );

    connect( this,	SIGNAL( saveConfig       ( void ) ),
	     this,	SLOT  ( saveMainWinConfig( void ) ) );


    // Create main view

    _treeView = new KDirTreeView( this );
    setCentralWidget( _treeView );

    connect( _treeView, SIGNAL( progressInfo( const QString & ) ),
	     this,      SLOT  ( statusMsg   ( const QString & ) ) );

    connect( _treeView, SIGNAL( selectionChanged( KFileInfo * ) ),
	     this,      SLOT  ( selectionChanged( KFileInfo * ) ) );

    connect( _treeView, SIGNAL( contextMenu( KDirTreeViewItem *, const QPoint & ) ),
	     this,      SLOT  ( contextMenu( KDirTreeViewItem *, const QPoint &) ) );

    connect( this,	SIGNAL( readConfig( void ) ),
	     _treeView,	SLOT  ( readConfig( void ) ) );

    connect( this,	SIGNAL( saveConfig( void ) ),
	     _treeView,	SLOT  ( saveConfig( void ) ) );


    // Call inits to invoke all other construction parts

    initStatusBar();
    initActions();
    initCleanups();
    createGUI();

    _treeViewContextMenu = (QPopupMenu *) factory()->container( "treeViewContextMenu", this );
    initPacMan();

    readMainWinConfig();


    // Disable certain actions at startup

    _editCopy->setEnabled( false );
    _reportMailToOwner->setEnabled( false );
    _fileRefreshAll->setEnabled( false );
    _fileRefreshSelected->setEnabled( false );
}


KDirStatApp::~KDirStatApp()
{
    delete _cleanupCollection;
}



void
KDirStatApp::initActions()
{
    _fileAskOpenDir	= KStdAction::open		( this, SLOT( fileAskOpenDir() ), 		actionCollection() );
    _fileOpenRecent	= KStdAction::openRecent	( this, SLOT( fileOpenRecent( const KURL& ) ),	actionCollection() );
    _fileCloseDir	= KStdAction::close		( this, SLOT( fileCloseDir() ), 		actionCollection() );

    _fileRefreshAll		= new KAction( i18n( "Refresh &All" ), "reload", 0,
					       this, SLOT( refreshAll() ),
					       actionCollection(), "file_refresh_all" );

    _fileRefreshSelected	= new KAction( i18n( "Refresh &Selected" ), 0,
					       this, SLOT( refreshSelected() ),
					       actionCollection(), "file_refresh_selected" );

    _fileQuit		= KStdAction::quit		( kapp, SLOT( quit()  		), actionCollection() );
    _editCopy		= KStdAction::copy		( this, SLOT( editCopy() 	), actionCollection() );
    _viewToolBar	= KStdAction::showToolbar	( this, SLOT( toggleToolBar()	), actionCollection() );
    _viewStatusBar	= KStdAction::showStatusbar	( this, SLOT( toggleStatusBar() ), actionCollection() );
    KAction * pref	= KStdAction::preferences	( this, SLOT( preferences()	), actionCollection() );

    _reportMailToOwner	= new KAction( i18n( "Send &Mail to Owner" ), "mail_generic", 0,
				       _treeView, SLOT( sendMailToOwner() ),
				       actionCollection(), "report_mail_to_owner" );

    _helpSendFeedbackMail = new KAction( i18n( "Send &Feedback Mail..." ), 0,
					 this, SLOT( sendFeedbackMail() ),
					 actionCollection(), "help_send_feedback_mail" );


    _fileAskOpenDir->setStatusText	( i18n( "Opens a directory"	 		) );
    _fileOpenRecent->setStatusText	( i18n( "Opens a recently used directory"	) );
    _fileCloseDir->setStatusText	( i18n( "Closes the current directory" 		) );
    _fileRefreshAll->setStatusText	( i18n( "Re-reads the entire directory tree"	) );
    _fileRefreshSelected->setStatusText	( i18n( "Re-reads the selected subtree"		) );
    _fileQuit->setStatusText		( i18n( "Quits the application" 		) );
    _editCopy->setStatusText		( i18n( "Copies the URL of the selected item to the clipboard" ) );
    _viewToolBar->setStatusText		( i18n( "Enables/disables the toolbar" 		) );
    _viewStatusBar->setStatusText	( i18n( "Enables/disables the statusbar" 	) );
    pref->setStatusText			( i18n( "Opens the preferences dialog"		) );
    _reportMailToOwner->setStatusText	( i18n( "Sends a mail to the owner of the selected subtree" ) );
}


void
KDirStatApp::initCleanups()
{
    _cleanupCollection = new KCleanupCollection( actionCollection() );
    CHECK_PTR( _cleanupCollection );
    _cleanupCollection->addStdCleanups();
    _cleanupCollection->addUserCleanups( USER_CLEANUPS );
    _cleanupCollection->slotReadConfig();

    connect( _treeView,          SIGNAL( selectionChanged( KFileInfo * ) ),
	     _cleanupCollection, SIGNAL( selectionChanged( KFileInfo * ) ) );

    connect( this,               SIGNAL( readConfig( void ) ),
	     _cleanupCollection, SIGNAL( readConfig( void ) ) );

    connect( this,               SIGNAL( saveConfig( void ) ),
	     _cleanupCollection, SIGNAL( saveConfig( void ) ) );
}


void
KDirStatApp::revertCleanupsToDefaults()
{
    KCleanupCollection defaultCollection;
    defaultCollection.addStdCleanups();
    defaultCollection.addUserCleanups( USER_CLEANUPS );
    *_cleanupCollection = defaultCollection;
}


void
KDirStatApp::initPacMan()
{
    _pacMan = new KPacMan( toolBar() );
    _pacMan->setInterval( PACMAN_INTERVAL );	// millisec
    int id = ID_PACMAN;
    toolBar()->insertWidget( id, PACMAN_WIDTH, _pacMan );
    toolBar()->setItemAutoSized( id, false );
    toolBar()->insertWidget( ++id, 1, new QWidget( toolBar() ) );

    connect( _treeView, SIGNAL( startingReading() ), _pacMan, SLOT( start() ) );
    connect( _treeView, SIGNAL( finished()        ), _pacMan, SLOT( stop () ) );
}


void
KDirStatApp::initStatusBar()
{
    statusBar()->insertItem( i18n( "Ready." ), ID_STATUS_MSG );
}


void
KDirStatApp::openURL( const KURL& url )
{
    statusMsg( i18n( "Opening directory..." ) );

    _treeView->openURL( url );
    _fileOpenRecent->addURL( url );
    _fileRefreshAll->setEnabled( true );
    setCaption( url.fileName(), false );

    statusMsg( i18n( "Ready." ) );
}


void KDirStatApp::readMainWinConfig()
{

    KConfig * config = kapp->config();
    config->setGroup( "General Options" );

    // Status settings of the various bars

    bool showToolbar = config->readBoolEntry( "Show Toolbar", true );
    _viewToolBar->setChecked( showToolbar );
    toggleToolBar();

    bool showStatusbar = config->readBoolEntry( "Show Statusbar", true );
    _viewStatusBar->setChecked( showStatusbar );
    toggleStatusBar();


    // Position settings of the various bars

    KToolBar::BarPosition toolBarPos;
    toolBarPos = ( KToolBar::BarPosition ) config->readNumEntry( "ToolBarPos", KToolBar::Top );
    toolBar( "mainToolBar" )->setBarPos( toolBarPos );

    // initialize the recent file list
    _fileOpenRecent->loadEntries( config,"Recent Files" );

    QSize size = config->readSizeEntry( "Geometry" );

    if( ! size.isEmpty() )
	resize( size );
}


void
KDirStatApp::saveMainWinConfig()
{
    KConfig * config = kapp->config();

    config->setGroup( "General Options" );

    config->writeEntry( "Geometry", 		size() );
    config->writeEntry( "Show Toolbar", 	_viewToolBar->isChecked() );
    config->writeEntry( "Show Statusbar",	_viewStatusBar->isChecked() );
    config->writeEntry( "ToolBarPos", 		(int ) toolBar( "mainToolBar" )->barPos() );

    _fileOpenRecent->saveEntries( config,"Recent Files" );
}


void
KDirStatApp::saveProperties( KConfig *config )
{
    (void) config;
    // TODO
}


void
KDirStatApp::readProperties( KConfig *config )
{
    (void) config;
    // TODO
}


bool
KDirStatApp::queryClose()
{
    return true;
}

bool
KDirStatApp::queryExit()
{
    emit saveConfig();

    return true;
}


//============================================================================
//				     Slots
//============================================================================


void
KDirStatApp::fileAskOpenDir()
{
    statusMsg( i18n( "Opening directory..." ) );

    KURL url = KFileDialog::getExistingDirectory( QString::null, this, i18n( "Open Directory..." ) );

    if( ! url.isEmpty() )
	openURL( url );

    statusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::fileOpenRecent( const KURL& url )
{
    statusMsg( i18n( "Opening directory..." ) );

    if( ! url.isEmpty() )
	openURL( url );

    statusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::fileCloseDir()
{
    statusMsg( i18n( "Closing directory..." ) );

    _treeView->clear();
    _fileRefreshAll->setEnabled( false );
    close();

    statusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::refreshAll()
{
    statusMsg( i18n( "Refreshing directory tree..." ) );
    _treeView->refreshAll();
    statusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::refreshSelected()
{
    if ( ! _treeView->selection() )
	return;

    statusMsg( i18n( "Refreshing selected subtree..." ) );
    _treeView->refreshSelected();
    statusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::editCopy()
{
    if ( _treeView->selection() )
	kapp->clipboard()->setText( _treeView->selection()->orig()->url() );
}


void
KDirStatApp::selectionChanged( KFileInfo *selection )
{
    if ( selection )
    {
	_editCopy->setEnabled( true );
	_reportMailToOwner->setEnabled( true );

	_fileRefreshSelected->setEnabled( ! selection->isDotEntry() );
	statusMsg( selection->url() );
    }
    else
    {
	_editCopy->setEnabled( false );
	_reportMailToOwner->setEnabled( false );
	_fileRefreshSelected->setEnabled( false );
	statusMsg( "" );
    }
}


void
KDirStatApp::toggleToolBar()
{
    if   ( _viewToolBar->isChecked() )	toolBar( "mainToolBar" )->show();
    else				toolBar( "mainToolBar" )->hide();
}


void
KDirStatApp::toggleStatusBar()
{
    if   ( _viewStatusBar->isChecked() )	statusBar()->show();
    else					statusBar()->hide();
}


void
KDirStatApp::preferences()
{
    if ( ! _settingsDialog )
    {
	_settingsDialog = new KDirStat::KSettingsDialog( this );
	CHECK_PTR( _settingsDialog );
    }

    if ( ! _settingsDialog->isVisible() )
	_settingsDialog->show();
}


void
KDirStatApp::statusMsg( const QString &text )
{
    // Change status message permanently

    statusBar()->clear();
    statusBar()->changeItem( text, ID_STATUS_MSG );
}


void
KDirStatApp::contextMenu( KDirTreeViewItem *item, const QPoint &pos )
{
    NOT_USED( item );

    if ( _treeViewContextMenu )
	_treeViewContextMenu->popup( pos );
}


// EOF
