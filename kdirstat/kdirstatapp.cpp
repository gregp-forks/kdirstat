/*
 *   File name:	kdirstatapp.cpp
 *   Summary:	The KDirStat application - menu bar, tool bar, ...
 *   License:	GPL - See file COPYING for details.
 *
 *   Author:	Stefan Hundhammer <sh@suse.de>
 *		Parts auto-generated by KDevelop - sorry for the mess
 *
 *   Updated:	2001-09-16
 *
 *   $Id: kdirstatapp.cpp,v 1.3 2001/10/22 21:17:46 harry1701 Exp $
 *
 */


#include <kapp.h>
#include <kiconloader.h>
#include <kmessagebox.h>
#include <kfiledialog.h>
#include <kmenubar.h>
#include <kstatusbar.h>
#include <klocale.h>
#include <kconfig.h>
#include <kstdaction.h>
#include <kdebug.h>
#include <qclipboard.h>

#include "kdirstatapp.h"
#include "kdirtree.h"
#include "kpacman.h"

#define ID_STATUS_MSG 1

using namespace KDirStat;


KDirStatApp::KDirStatApp( QWidget* , const char* name )
    : KMainWindow( 0, name )
{
    config=kapp->config();
    _view = new KDirStat::KDirTreeView( this );
    setCentralWidget( _view );
    
    connect( _view, SIGNAL( progressInfo(  const QString & ) ),
	     this,  SLOT  ( slotStatusMsg( const QString & ) ) );
    
    connect( _view, SIGNAL( selectionChanged    ( KFileInfo * ) ),
	     this,  SLOT  ( slotSelectionChanged( KDirStat::KFileInfo * ) ) );

    // call inits to invoke all other construction parts
    initStatusBar();
    initActions();

    _pacMan = new KPacMan( toolBar() );
    _pacMan->setInterval( 75 );	// millisec
    int id = 42;
    toolBar()->insertWidget( id, 350, _pacMan );
    toolBar()->setItemAutoSized( id, false );
    toolBar()->insertWidget( ++id, 1, new QWidget( toolBar() ) );

    connect( _view, SIGNAL( startingReading()	), _pacMan, SLOT( start() ) );
    connect( _view, SIGNAL( finished() 		), _pacMan, SLOT( stop () ) );
    
    readOptions();

    // disable actions at startup
    editCopy->setEnabled( false );
    fileRefreshAll->setEnabled( false );
}

KDirStatApp::~KDirStatApp()
{

}


void
KDirStatApp::initActions()
{
    fileAskOpenDir	= KStdAction::open		( this, SLOT( slotFileAskOpenDir()	), actionCollection() );
    fileOpenRecent	= KStdAction::openRecent	( this, SLOT( slotFileOpenRecent( const KURL& ) ), actionCollection() );
    fileCloseDir	= KStdAction::close		( this, SLOT( slotFileCloseDir()	), actionCollection() );
    
    fileRefreshAll	= new KAction( i18n( "Refresh &All" ), "reload", 0, this,
					     SLOT( slotRefreshAll() ),
					     actionCollection(), "file_refresh_all" );
    
    fileQuit		= KStdAction::quit		( kapp, SLOT( quit()  			), actionCollection() );
    editCopy		= KStdAction::copy		( this, SLOT( slotEditCopy() 		), actionCollection() );
    viewToolBar		= KStdAction::showToolbar	( this, SLOT( slotToggleToolBar()	), actionCollection() );
    viewStatusBar	= KStdAction::showStatusbar	( this, SLOT( slotToggleStatusBar() 	), actionCollection() );

    fileAskOpenDir->setStatusText	( i18n( "Opens a directory"	 		) );
    fileOpenRecent->setStatusText	( i18n( "Opens a recently used directory"	) );
    fileCloseDir->setStatusText		( i18n( "Closes the current directory" 		) );
    fileRefreshAll->setStatusText	( i18n( "Re-reads the entire directory tree"	) );
    fileQuit->setStatusText		( i18n( "Quits the application" 		) );
    editCopy->setStatusText		( i18n( "Copies the URL of the selected item to the clipboard" ) );
    viewToolBar->setStatusText		( i18n( "Enables/disables the toolbar" 		) );
    viewStatusBar->setStatusText	( i18n( "Enables/disables the statusbar" 	) );

    // use the absolute path to your kdirstatui.rc file for testing purpose in createGUI();
    createGUI();
}


void
KDirStatApp::initStatusBar()
{
    // STATUSBAR
    // TODO: add your own items you need for displaying current application status.
    statusBar()->insertItem( i18n( "Ready." ), ID_STATUS_MSG );
}


void
KDirStatApp::openURL( const KURL& url )
{
    slotStatusMsg( i18n( "Opening directory..." ) );

    _view->openURL( url );
    fileOpenRecent->addURL( url );
    fileRefreshAll->setEnabled( true );
    setCaption( url.fileName(), false );
    
    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::saveOptions()
{	
    config->setGroup( "General Options" );
    config->writeEntry( "Geometry", 		size() );
    config->writeEntry( "Show Toolbar", 	viewToolBar->isChecked() );
    config->writeEntry( "Show Statusbar",	viewStatusBar->isChecked() );
    config->writeEntry( "ToolBarPos", 		(int ) toolBar( "mainToolBar" )->barPos() );
    fileOpenRecent->saveEntries(  config,"Recent Files" );
}


void KDirStatApp::readOptions()
{
	
    config->setGroup( "General Options" );

    // bar status settings
    bool showToolbar = config->readBoolEntry( "Show Toolbar", true );
    viewToolBar->setChecked( showToolbar );
    slotToggleToolBar();

    bool showStatusbar = config->readBoolEntry( "Show Statusbar", true );
    viewStatusBar->setChecked( showStatusbar );
    slotToggleStatusBar();


    // bar position settings
    KToolBar::BarPosition toolBarPos;
    toolBarPos=( KToolBar::BarPosition ) config->readNumEntry( "ToolBarPos", KToolBar::Top );
    toolBar( "mainToolBar" )->setBarPos( toolBarPos );
	
    // initialize the recent file list
    fileOpenRecent->loadEntries( config,"Recent Files" );

    QSize size=config->readSizeEntry( "Geometry" );
    
    if( ! size.isEmpty() )
    {
	resize( size );
    }
}


void
KDirStatApp::saveProperties( KConfig *config )
{
    (void) config;
    // TODO
}


void
KDirStatApp::readProperties( KConfig *config )
{
    (void) config;
    // TODO
}		


bool
KDirStatApp::queryClose()
{
    return true;
}

bool
KDirStatApp::queryExit()
{
    saveOptions();
    return true;
}


//============================================================================
//				     Slots
//============================================================================


void
KDirStatApp::slotFileAskOpenDir()
{
    slotStatusMsg( i18n( "Opening directory..." ) );

    {	
	KURL url=KFileDialog::getExistingDirectory( QString::null, this, i18n( "Open Directory..." ) );
	
	if( ! url.isEmpty() )
	{
	    openURL( url );
	}
    }
    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotFileOpenRecent( const KURL& url )
{
    slotStatusMsg( i18n( "Opening directory..." ) );

    if( ! url.isEmpty() )
    {
	openURL( url );
    }

    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotFileCloseDir()
{
    slotStatusMsg( i18n( "Closing directory..." ) );

    _view->clear();
    fileRefreshAll->setEnabled( false );
    close();

    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotRefreshAll()
{
    slotStatusMsg( i18n( "Refreshing directory tree..." ) );
    _view->refreshAll();
    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotEditCopy()
{
    slotStatusMsg( i18n( "Copying selection to clipboard..." ) );

    if ( _view->selection() )
    {
	kapp->clipboard()->setText( _view->selection()->orig()->url() );
    }

    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotSelectionChanged( KDirStat::KFileInfo *selection )
{
    if ( selection )
    {
	editCopy->setEnabled( true );
	slotStatusMsg( selection->url() );
    }
    else
    {
	editCopy->setEnabled( false );
	slotStatusMsg( "" );
    }
}


void
KDirStatApp::slotToggleToolBar()
{
    slotStatusMsg( i18n( "Toggling toolbar..." ) );

    // turn Toolbar on or off
    if( !viewToolBar->isChecked() )
    {
	toolBar( "mainToolBar" )->hide();
    }
    else
    {
	toolBar( "mainToolBar" )->show();
    }		

    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotToggleStatusBar()
{
    slotStatusMsg( i18n( "Toggle the statusbar..." ) );

    //turn Statusbar on or off
    if( !viewStatusBar->isChecked() )
    {
	statusBar()->hide();
    }
    else
    {
	statusBar()->show();
    }

    slotStatusMsg( i18n( "Ready." ) );
}


void
KDirStatApp::slotStatusMsg( const QString &text )
{
    // change status message permanently
    statusBar()->clear();
    statusBar()->changeItem( text, ID_STATUS_MSG );
}



// EOF
