/*
 *   File name:	kdirstatapp.h
 *   Summary:	The KDirStat application - menu bar, tool bar, ...
 *   License:	GPL - See file COPYING for details.
 *
 *   Author:	Stefan Hundhammer <sh@suse.de>
 *		Parts auto-generated by KDevelop - sorry for the mess 
 *
 *   Updated:	2001-06-11
 *
 *   $Id: kdirstatapp.h,v 1.1 2001/06/29 16:37:49 hundhammer Exp $
 *
 */


#ifndef KDirStatApp_h
#define KDirStatApp_h
 

#ifdef HAVE_CONFIG_H
#   include <config.h>
#endif

#include <kapp.h>
#include <kmainwindow.h>
#include <kaccel.h>
#include <kaction.h>
#include "kdirtreeview.h"

class KPacMan;

/**
  * The base class for KDirStat application windows. It sets up the main window
  * and reads the config file as well as providing a menubar, toolbar and
  * statusbar. An instance of KDirStatView creates your center view, which is
  * connected to the window's Doc object.  KDirStatApp reimplements the methods
  * that KMainWindow provides for main window handling and supports full
  * session management as well as using KActions.
  *
  * @see KMainWindow
  * @see KApplication
  * @see KConfig
  *
  * @author Source Framework Automatically Generated by KDevelop,
  *	    (c) The KDevelop Team.
  *
  * @version KDevelop version 1.2 code generation
  **/
class KDirStatApp : public KMainWindow
{
    Q_OBJECT

public:
    
    /**
     * Construtor of KDirStatApp, calls all init functions to create the
     * application.
     **/
    KDirStatApp( QWidget* parent=0, const char* name=0 );

    /**
     * Destructor.
     **/
    ~KDirStatApp();
    
    /**
     * Open an URL specified by command line argument.
     **/
    void openURL( const KURL & url );


protected:

    /**
     * Save general Options like all bar positions and status as well as the
     * geometry and the recent file list to the configuration file.
     **/ 	
    void saveOptions();
    
    /**
     * Read general Options again and initialize all variables like the recent
     * file list.
     **/
    void readOptions();
    
    /**
     * Initialize the KActions of the application.
     **/
    void initActions();
    
    /**
     * Set up status bar for the main window by initializing a status label.
     **/
    void initStatusBar();
    
    /**
     * Called when a main window is to be closed.
     *
     * Returns "true" when closing this window is OK, "false" to abort closing.
     **/
    virtual bool queryClose();
    
    /**
     * Called when the application is to be shut down alltogether, i.e. when
     * all windows are to be closed.
     *
     * Returns "true" when exiting is OK, "false" otherwise.
     **/
    virtual bool queryExit();
    
    /**
     * Save the window properties for each open window during session end to
     * the session config file, including saving the currently opened file by a
     * temporary filename provided by KApplication.
     *
     * @see KTMainWindow#saveProperties
     **/
    virtual void saveProperties( KConfig * config );
    
    /**
     * Reads session config file and restore application state including the
     * last opened files and documents by reading the temporary files saved by
     * saveProperties().
     *
     * @see KTMainWindow#readProperties
     **/
    virtual void readProperties( KConfig * config );


public slots:

    /**
     * Open a new application window by creating a new instance of KDirStatApp.
     **/
    void slotFileNewWindow();
    
    /**
     * Clear the document in the current view to reuse it as the new document.
     **/
    void slotFileNew();
    
    /**
     * Open a directory tree.
     **/
    void slotFileOpenDir();
    
    /**
     * Open a directory tree from the "recent" menu.
     **/
    void slotFileOpenRecent( const KURL& url );
    
    /**
     * asks for saving if the file is modified, then closes the current file
     * and window
     **/
    void slotFileCloseDir();

    /**
     * put the marked text/object into the clipboard
     **/
    void slotEditCopy();
    
    /**
     * toggle toolbar
     **/
    void slotToggleToolBar();
    
    /**
     * toggle statusbar
     **/
    void slotToggleStatusBar();
    
    /**
     * changes the statusbar contents for the standard label permanently, used
     * to indicate current actions.
     *
     * @param text the text that is displayed in the statusbar
     **/
    void slotStatusMsg( const QString &text );


protected:

    KDirStat::KDirTreeView *	_view;
    KPacMan *			_pacMan;

    
    /**
     * the configuration object of the application
     **/
    KConfig *config;
    
    /**
     * view is the main widget which represents your working area. The View
     * class should handle all events of the view widget.  It is kept empty so
     * you can create your view according to your application's needs by
     * changing the view class.
     **/

    // KAction pointers to enable/disable actions
    KAction *			fileNewWindow;
    KAction * 			fileOpenDir;
    KRecentFilesAction *	fileOpenRecent;
    KAction * 			fileCloseDir;
    KAction * 			fileQuit;
    KAction * 			editCopy;
    KToggleAction * 		viewToolBar;
    KToggleAction * 		viewStatusBar;

};

 
#endif // KDirStatApp_h
